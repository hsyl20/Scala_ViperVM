Abstractions from OpenCL
========================

Rules
-----
R1) One context per device. 


1) Abstract clKernel to make it thread-safe.
Store arguments in a data structure and commit them into the actual clKernel structure just before clEnqueueNDRangeKernel

2) Abstract clProgram into Program
Program stores source code
Program is a set of clProgram lazily built for different contexts/devices (see R1)

DONE


3) Abstract built program into Kernel
A codelet takes a Program, a function name and a description of kernel parameters (type, relative size, access type (RO,WO,RW)).
A codelet may have requirements (device type, device capabilities...)

4) Create KernelGroup
KernelGroup groups codelets that perform the same operation.

5) Immutable data model
Kernel execution returns new Data handle for each produced (WO and RW) data
Computed data are read-only
One can manipulate soon-to-be computed data

6) Allow submission of kernels on devices that don't already have input data in memory
Allow custom scheduling of data transfer and kernel execution for each device

7) Allow submission of kernel on scheduler without specifiying device
Allow custom scheduling

8) Allow submission of kernel group on scheduler without specifying device
Allow custom scheduling
